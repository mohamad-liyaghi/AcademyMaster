version: '3.9'

x-environment: &COMMON_VARS
    DJANGO_SETTINGS_MODULE: 'config.settings.production'

services:
  backend:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    command: sh docker/production/commands/setup.sh
    container_name: academy-master-backend
    ports:
      - 8000:8000
    volumes:
      - .:/backend
      - .env.prod.sample:/backend/.env
    restart: on-failure
    networks:
      - main
    environment:
      *COMMON_VARS
    depends_on:
      elastic:
          condition: service_healthy
      database:
        condition: service_started
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
  database:
    image: postgres:12
    container_name: academy-master-postgres
    restart: on-failure
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data  
    networks:
      - main
    environment:
      - POSTGRES_DB=$DATABASE_NAME
      - POSTGRES_USER=$DATABASE_USER
      - POSTGRES_PASSWORD=$DATABASE_PASSWORD

  test_database:
    image: postgres:12
    container_name: academy-master-postgres-test
    restart: on-failure
    ports:
      - 5431:5432
    networks:
      - main
    environment:
      - POSTGRES_DB=$TEST_DATABASE_NAME
      - POSTGRES_USER=$TEST_DATABASE_USER
      - POSTGRES_PASSWORD=$TEST_DATABASE_PASSWORD

  celery:
    build: 
      context: .
      dockerfile: docker/production/Dockerfile
    container_name: academy-master-celery
    command: sh docker/production/commands/celery.sh 
    depends_on:
      backend:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/backend
    networks:
      - main    
    env_file:
      - .env.prod.sample
    environment:
      *COMMON_VARS
    
  celery-beat:
    build: 
      context: .
      dockerfile: docker/production/Dockerfile
    container_name: academy-master-celery-beat
    command: sh docker/production/commands/celery-beat.sh 
    depends_on:
      backend:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/backend
    networks:
      - main 
    env_file:
      - .env.prod.sample
    environment:
      *COMMON_VARS

  rabbitmq:
      image: rabbitmq:3.10-management-alpine
      hostname: rabbitmq
      container_name: academy-master-rabbitmq
      ports:
        - "5672:5672"
        - "15672:15672"
      environment:
        - RABBITMQ_DEFAULT_USER=rabbituser
        - RABBITMQ_DEFAULT_PASS=1234EErr
        - RABBITMQ_DEFAULT_VHOST=/
      networks:
        - main
      healthcheck:
        test: ["CMD", "rabbitmqctl", "status"]
        interval: 3s
        timeout: 3s
        retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: academy-master-redis
    
    ports:
      - 6379:6379
    networks:
      - main
    restart: always
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: academy-master-elastic
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 7s
      timeout: 3s
      retries: 3
    ports:
      - 9200:9200
    networks:
      - main
    restart: always

networks:
  main:

volumes:
  postgres-data: