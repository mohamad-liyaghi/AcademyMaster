version: '3.9'

x-environment: &COMMON_VARS
  DJANGO_SETTINGS_MODULE: 'config.settings.production'
  ENVIRONMENT: PRODUCTION


services:

  backend:
    restart: on-failure
    command: sh ./docker/commands/setup.sh
    container_name: academy-master-backend
    image: ml06py/academy_master:latest
    ports:
      - "8000:8000"
    volumes:
      - ./backend/:/backend
      - ./backend/.env.prod/:/backend/.env
    networks:
      - main
    environment:
      *COMMON_VARS
    depends_on:
      elastic:
        condition: service_healthy
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      smtp4dev:
        condition: service_started

  postgres:
    image: postgres:12
    container_name: academy-master-postgres
    restart: on-failure
    expose:
      - 5432
    env_file:
      - ./backend/.env.prod/
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/scripts/pg-entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
    environment:
      - POSTGRES_MULTIPLE_DATABASES="${POSTGRES_NAME},${TEST_POSTGRES_NAME}"
    networks:
      - main

  rabbitmq:
    image: rabbitmq:3.10-management-alpine
    hostname: rabbitmq
    container_name: academy-master-rabbitmq
    expose:
      - 15672
      - 5672
    env_file:
      - ./backend/.env.prod/
    networks:
      - main
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 3s
      timeout: 3s
      retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: academy-master-redis
    expose:
      - 6379
    networks:
      - main
    restart: always


  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: academy-master-elastic
    env_file:
      - ./backend/.env.prod
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 15s
      timeout: 30s
      retries: 10
    expose:
      - 9200
    networks:
      - main
    restart: always

  smtp4dev:
    image: rnwood/smtp4dev:v3
    container_name: academy-master-smtp4dev
    ports:
      - "5000:80"
    expose:
      - 25
    networks:
      - main
    restart: always

  celery:
    image: ml06py/academy_master:latest
    container_name: academy-master-celery
    command: sh ./docker/commands/celery.sh
    volumes:
      - ./backend/:/backend
    environment:
      *COMMON_VARS
    env_file:
      - ./backend/.env.prod/
    networks:
      - main
    depends_on:
      backend:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  celery-beat:
    image: ml06py/academy_master:latest
    container_name: academy-master-celery-beat
    command: sh ./docker/commands/celery-beat.sh
    env_file:
      - ./backend/.env.prod/
    environment:
      *COMMON_VARS
    volumes:
      - ./backend/:/backend
    networks:
      - main
    depends_on:
      backend:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    container_name: academy-master-prometheus
    volumes:
      - ./prometheus/config.yaml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - backend
    networks:
      - main

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: academy-master-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - invest-club_node_exporter_data:/host
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - main


  # frontend:
  #   extends:
  #     file: frontend/docker-compose.yml
  #     service: frontend

networks:
  main:

volumes:
  postgres-data:
